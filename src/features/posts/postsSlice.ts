import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'

import type {AppState, AppThunk} from '../../app/store'
import {useGetPostsById} from "../../app/hooks";

export interface PostsStates {
    postData: string | null
    status: 'idle' | 'loading' | 'failed'
}

const initialState: PostsStates = {
    postData: JSON.stringify({data: null, status: "loading"}),
    status: 'loading',
}


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPostData = createAsyncThunk(
    'posts/getPost',
    async (id: { id: number }) => {
        const response = await useGetPostsById(id);
        // The value we return becomes the `fulfilled` action payload
        return JSON.stringify({resData : response.data , status:response.status});
    }
)

export const postsSlice = createSlice({
    name: 'posts',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        loadPostData: (state) => {
            // console.log(state)
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getPostData.pending, (state) => {
                state.status = 'loading'

            })
            .addCase(getPostData.fulfilled, (state, action) => {
                state.status = 'idle'
                state.postData = action.payload
            })
    },
})

// export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectData = (state: AppState) => state.posts

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default postsSlice.reducer
